// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts(title, content, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreatePostParams struct {
	Title     pgtype.Text
	Content   pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.Exec(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePostById, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, content, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, content, created_at, updated_at FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostById = `-- name: UpdatePostById :one
UPDATE posts
SET title=$1, content=$2, updated_at=$3
WHERE id = $4
RETURNING id, title, content, created_at, updated_at
`

type UpdatePostByIdParams struct {
	Title     pgtype.Text
	Content   pgtype.Text
	UpdatedAt pgtype.Timestamptz
	ID        int64
}

func (q *Queries) UpdatePostById(ctx context.Context, arg UpdatePostByIdParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePostById,
		arg.Title,
		arg.Content,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
