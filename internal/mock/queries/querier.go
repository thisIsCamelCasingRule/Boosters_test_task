// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockqueries

import (
	queries "Boosters_test_task/pkg/database/queries"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, arg
func (_m *Querier) CreatePost(ctx context.Context, arg queries.CreatePostParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.CreatePostParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePostById provides a mock function with given fields: ctx, id
func (_m *Querier) DeletePostById(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePostById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPostById provides a mock function with given fields: ctx, id
func (_m *Querier) GetPostById(ctx context.Context, id int64) (queries.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostById")
	}

	var r0 queries.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (queries.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) queries.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(queries.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx
func (_m *Querier) GetPosts(ctx context.Context) ([]queries.Post, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []queries.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]queries.Post, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []queries.Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostById provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdatePostById(ctx context.Context, arg queries.UpdatePostByIdParams) (queries.Post, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostById")
	}

	var r0 queries.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.UpdatePostByIdParams) (queries.Post, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queries.UpdatePostByIdParams) queries.Post); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(queries.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, queries.UpdatePostByIdParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
